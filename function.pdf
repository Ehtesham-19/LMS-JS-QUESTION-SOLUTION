Hereâ€™s a **detailed explanation** of your questions ðŸ‘‡

---

## 1. Self-Invoke / Immediate Invoke Function Expression (IIFE)

### Definition:

A **Self-Invoking Function** (or **IIFE â€“ Immediately Invoked Function Expression**) is a function that runs immediately after it is defined, without being explicitly called elsewhere in the code.

* Purpose:

  * To create a private scope (avoid polluting global scope).
  * To execute code immediately once.

### Syntax (Function Keyword):

```javascript
(function () {
  console.log("This is a self-invoked function!");
})();
```

Here:

* `(function() { ... })` â†’ function expression wrapped in parentheses.
* `()` at the end â†’ executes it immediately.

### Example with Parameters:

```javascript
(function (name) {
  console.log("Hello, " + name);
})("Alice");
```

---

### Syntax (Arrow Function):

```javascript
(() => {
  console.log("This is an IIFE with arrow function!");
})();
```

With parameters:

```javascript
((x, y) => {
  console.log("Sum is: " + (x + y));
})(2, 3);
```

---

## 2. Built-in Functions in JavaScript

### Meaning:

Built-in functions are **predefined functions provided by JavaScript** to perform common tasks without writing extra code.

* Saves time.
* Makes code cleaner and more reliable.
* Increases productivity.

---

### Common **String Built-in Functions**:

1. `length` â€“ returns string length.
2. `charAt(index)` â€“ returns character at given index.
3. `toUpperCase()` â€“ converts string to uppercase.
4. `toLowerCase()` â€“ converts string to lowercase.
5. `trim()` â€“ removes whitespace from both ends.
6. `slice(start, end)` â€“ extracts part of string.
7. `substring(start, end)` â€“ similar to slice but different handling of negative values.
8. `split(separator)` â€“ splits string into array.
9. `replace(old, new)` â€“ replaces part of string.
10. `includes(value)` â€“ checks if substring exists.

---

### Common **Array Built-in Functions**:

1. `push(element)` â€“ add element at end.
2. `pop()` â€“ remove element from end.
3. `shift()` â€“ remove element from beginning.
4. `unshift(element)` â€“ add element at beginning.
5. `concat(array)` â€“ merge arrays.
6. `slice(start, end)` â€“ extract part of array.
7. `splice(start, deleteCount, items...)` â€“ add/remove elements.
8. `indexOf(value)` â€“ get index of element.
9. `includes(value)` â€“ check if element exists.
10. `forEach(callback)` â€“ loop through array.
11. `map(callback)` â€“ return new array by transforming each element.
12. `filter(callback)` â€“ return new array with elements passing condition.
13. `reduce(callback, initialValue)` â€“ reduce array to single value.
14. `find(callback)` â€“ return first matching element.
15. `sort()` â€“ sort elements.
16. `reverse()` â€“ reverse array order.

---

## 3. Benefits of Using Built-in Functions

* **Efficiency**: Saves time, as no need to write custom implementations.
* **Reliability**: Pre-tested and optimized by JavaScript engine.
* **Readability**: Code becomes cleaner and easier to understand.
* **Performance**: Often more optimized than manually written loops.
* **Cross-Browser Support**: Works consistently across environments.

---

ðŸ‘‰ Would you like me to **create a PDF** for this explanation (with examples of String and Array built-in functions demonstrated in code), like the previous ones?
