Perfect üëç Here‚Äôs the **full formatted text version** of your JavaScript Type Conversion assignment. You can copy this into **Word/Google Docs** and export it as a PDF easily.

---

# JavaScript Type Conversion Assignment

## üéØ Objectives

* Grasp the concept of type conversion in JavaScript.
* Differentiate between implicit and explicit type casting.
* Practice converting data types using various methods.

---

## Part 1: Understanding Type Conversion

**Type Conversion** in JavaScript refers to converting a value from one data type to another. For example, converting a string `"123"` into the number `123`.

There are **two main types** of type conversion:

1. **Implicit Conversion (Type Coercion):**
   JavaScript automatically converts one data type to another when required.
   Example: `"5" + 2` ‚Üí `"52"` (number converted to string).

2. **Explicit Conversion (Type Casting):**
   The programmer manually converts values using functions or operators.
   Example: `Number("5")` ‚Üí `5`.

---

## Part 2: Implicit Type Conversion

### Example Program

```javascript
// Adding a string and a number
let result1 = "The number is " + 10;
console.log(result1); // "The number is 10"

// Concatenating a string and a boolean
let result2 = "Boolean value: " + true;
console.log(result2); // "Boolean value: true"

// Using a string in a mathematical operation
let result3 = "20" - 5;
console.log(result3); // 15 (string "20" converted to number)
```

‚úÖ **Observation:**

* `+` with a string ‚Üí performs concatenation.
* Other operators like `-`, `*`, `/` ‚Üí convert strings to numbers automatically.

---

## Part 3: Explicit Type Casting

### Common Methods for Explicit Conversion

1. **Number()** ‚Üí Converts value to a number.
2. **String()** ‚Üí Converts value to a string.
3. **Boolean()** ‚Üí Converts value to a boolean.

### Example Program

```javascript
// Convert string to number
let strNum = "42";
let num = Number(strNum);
console.log("Original:", strNum, "Type:", typeof strNum);
console.log("Converted:", num, "Type:", typeof num);

// Convert boolean to string
let boolValue = true;
let strBool = String(boolValue);
console.log("Original:", boolValue, "Type:", typeof boolValue);
console.log("Converted:", strBool, "Type:", typeof strBool);

// Convert value to boolean
let val = 0;
let boolConverted = Boolean(val);
console.log("Original:", val, "Type:", typeof val);
console.log("Converted:", boolConverted, "Type:", typeof boolConverted);
```

---

## Part 4: Challenges

### Challenge 1: Identify Original Data Type

```javascript
function identifyType(value) {
  if (typeof value === "string") {
    console.log("The value is a String");
  } else if (typeof value === "number") {
    console.log("The value is a Number");
  } else if (typeof value === "boolean") {
    console.log("The value is a Boolean");
  } else if (typeof value === "object") {
    console.log("The value is an Object");
  } else {
    console.log("Unknown type");
  }
}

identifyType("Hello"); // String
identifyType(123);     // Number
identifyType(true);    // Boolean
identifyType({});      // Object
```

---

### Challenge 2: User Input Conversion

```javascript
let userInput = prompt("Enter a number:");
let convertedNumber = Number(userInput);

if (isNaN(convertedNumber)) {
  console.log("Error: Please enter a valid numeric value.");
} else {
  let sum = convertedNumber + 10;
  console.log("Result after adding 10:", sum);
}
```

‚úÖ This ensures that non-numeric values are handled properly.

---

# üìå Reflection

* **Implicit conversion** can save time but may lead to unexpected results (e.g., `"5" + 1 = "51"`).
* **Explicit conversion** is safer and gives programmers more control.
* Always use explicit type casting when working with critical data (e.g., form inputs, financial applications).

---

Would you like me to also create a **visual flowchart (Implicit vs Explicit conversion process)** so you can include it in the PDF for better clarity?
